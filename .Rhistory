#' author: "Erika Lee"
#' ---
#'
#' ## Perform a k-NN prediction on a new data after training the training data with all 11 predictors (ignore the MEDV
#' ##column), trying values of k from 1 to 10. Make sure to normalize the data, and
#' ##choose function knn() from package class rather than package FNN. To make sure
#' ##R is using the class package (when both packages are loaded), use class::knn().
#' ##What is the best k? What does it mean?
#'
## -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
library(caret)
#' author: "Erika Lee"
#' ---
#'
#' ## Perform a k-NN prediction on a new data after training the training data with all 11 predictors (ignore the MEDV
#' ##column), trying values of k from 1 to 10. Make sure to normalize the data, and
#' ##choose function knn() from package class rather than package FNN. To make sure
#' ##R is using the class package (when both packages are loaded), use class::knn().
#' ##What is the best k? What does it mean?
#'
## -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
library(ggplot2)
library(lattice)
library(caret)
df <-read.csv("BostonHousing.csv")
df <-read.csv("C:\Users\kwan0\OneDrive\Desktop\PreAnalytics\BostonHousing.csv")
df <-read.csv("C:/Users/kwan0/OneDrive/Desktop/PreAnalytics/BostonHousing.csv")
#delete MEDV
df <-df[,-13]
View(df)
#delete RAD
df <-df[,-9]
#delete CHAS
df <- df[,-4]
set.seed(1)
----------Q3: make line-by-line annotation for the following five lines of codes.Â .--------------
train.index <- sample(row.names(df), 0.6*dim(df)[1])
valid.index <- setdiff(row.names(df), train.index)
train.df <- df[train.index, ]
valid.df <- df[valid.index, ]
valid.df$CAT..MEDV <-as.factor(valid.df$CAT..MEDV)
#'
#'
#' new data
## -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
new.df <- data.frame(
CRIM=0.10469,
ZN=0,
INDUS=15,
NOX=0.4,
RM=7,
AGE=49,
DIS=4.78,
TAX=254,
PTRATIO=21,
LSTAT=12
)
train.index <- sample(row.names(df), 0.6*dim(df)[1])
valid.index <- setdiff(row.names(df), train.index)
train.df <- df[train.index, ]
valid.df <- df[valid.index, ]
valid.df$CAT..MEDV <-as.factor(valid.df$CAT..MEDV)
#'
#' use preProcess() from the caret package to normalize predictor variables. Check out the normalized data.
#' method = "center" subtracts the mean of the predictor's data (again from the data in x) from the predictor values while method = "scale" divides by the standard deviation. https://www.rdocumentation.org/packages/caret/versions/6.0-90/topics/preProcess
#'
## -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#----------Q4: write your code to preProcess the predictor variables from the train data---------------------------------
norm.preprocess <- preProcess(train.df[,1:10], method=c("center", "scale"))
train.norm.df[, 1:10] <- predict(norm.values, train.df[, 1:10])
valid.norm.df[, 1:10] <- predict(norm.values, valid.df[, 1:10])
norm.df[, 1:10] <- predict(norm.values, df[, 1:10])
new.norm.df <- predict(norm.values, new.df)
#'
#' use preProcess() from the caret package to normalize predictor variables. Check out the normalized data.
#' method = "center" subtracts the mean of the predictor's data (again from the data in x) from the predictor values while method = "scale" divides by the standard deviation. https://www.rdocumentation.org/packages/caret/versions/6.0-90/topics/preProcess
#'
## -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#----------Q4: write your code to preProcess the predictor variables from the train data---------------------------------
norm.values <- preProcess(train.df[,1:10], method=c("center", "scale"))
train.norm.df[, 1:10] <- predict(norm.values, train.df[, 1:10])
valid.norm.df[, 1:10] <- predict(norm.values, valid.df[, 1:10])
#'
#' use preProcess() from the caret package to normalize predictor variables. Check out the normalized data.
#' method = "center" subtracts the mean of the predictor's data (again from the data in x) from the predictor values while method = "scale" divides by the standard deviation. https://www.rdocumentation.org/packages/caret/versions/6.0-90/topics/preProcess
#'
## -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#----------Q4: write your code to preProcess the predictor variables from the train data---------------------------------
norm.values.df <- preProcess(train.df[,1:10], method=c("center", "scale"))
train.norm.df[, 1:10] <- predict(norm.values, train.df[, 1:10])
#'
#'
#' prepare for normalizing training, validation data, complete data frames to originals
#'
## -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
train.norm.df <- train.df
valid.norm.df <- valid.df
norm.df <- df
#'
#' use preProcess() from the caret package to normalize predictor variables. Check out the normalized data.
#' method = "center" subtracts the mean of the predictor's data (again from the data in x) from the predictor values while method = "scale" divides by the standard deviation. https://www.rdocumentation.org/packages/caret/versions/6.0-90/topics/preProcess
#'
## -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#----------Q4: write your code to preProcess the predictor variables from the train data---------------------------------
norm.values.df <- preProcess(train.df[,1:10], method=c("center", "scale"))
train.norm.df[, 1:10] <- predict(norm.values, train.df[, 1:10])
valid.norm.df[, 1:10] <- predict(norm.values, valid.df[, 1:10])
norm.df[, 1:10] <- predict(norm.values, df[, 1:10])
new.norm.df <- predict(norm.values, new.df)
## -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
library(class)
#'
#' use preProcess() from the caret package to normalize predictor variables. Check out the normalized data.
#' method = "center" subtracts the mean of the predictor's data (again from the data in x) from the predictor values while method = "scale" divides by the standard deviation. https://www.rdocumentation.org/packages/caret/versions/6.0-90/topics/preProcess
#'
## -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#----------Q4: write your code to preProcess the predictor variables from the train data---------------------------------
norm.preprocess <- preProcess(train.df[,1:10], method=c("center", "scale"))
train.norm.df[, 1:10] <- predict(norm.values, train.df[, 1:10])
valid.norm.df[, 1:10] <- predict(norm.values, valid.df[, 1:10])
norm.df[, 1:10] <- predict(norm.values, df[, 1:10])
new.norm.df <- predict(norm.values, new.df)
pred_nn <- knn(train = train.norm.df[, 1:10], test = new.norm.df,
cl = train.norm.df[, 11], k = 2)
pred_nn
# initialize a data frame with two columns: k, and accuracy.
accuracy.df <- data.frame(k = seq(1, 10, 1), accuracy = rep(0, 10))
#----------Q5: annotate the following lines of code--------------------------------------------------
knn.pred <- knn(train.norm.df[, 1:10], valid.norm.df[, 1:10],
cl = train.norm.df[, 11], k = 3)
valid.norm.df$CAT..MEDV <-as.factor(valid.norm.df$CAT..MEDV)
accuracy.df[3, 2] <- confusionMatrix(knn.pred, valid.norm.df[,
11])$overall[1]
View(accuracy.df)
accuracy.df
new.rec <- data.frame(
CRIM=0.53,
ZN=0,
INDUS=6.18,
NOX=0.5,
RM=8,
AGE=83,
DIS=3,
TAX=307,
PTRATIO=17,
LSTAT=5
)
new.norm.rec <- predict(norm.values, new.rec)
new.norm.rec
View(accuracy.df)
train.norm.df[, 1:10] <- predict(norm.values, train.df[, 1:10])
valid.norm.df[, 1:10] <- predict(norm.values, valid.df[, 1:10])
norm.df[, 1:10] <- predict(norm.values, df[, 1:10])
new.norm.df <- predict(norm.values, new.df)
View(norm.values)
View(norm.values.df)
new.norm.df <- predict(norm.values, new.df)
## -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
library(class)
pred_nn <- knn(train = train.norm.df[, 1:10], test = new.norm.df,
cl = train.norm.df[, 11], k = 2)
pred_nn
# initialize a data frame with two columns: k, and accuracy.
accuracy.df <- data.frame(k = seq(1, 10, 1), accuracy = rep(0, 10))
#----------Q5: annotate the following lines of code--------------------------------------------------
knn.pred <- knn(train.norm.df[, 1:10], valid.norm.df[, 1:10],
cl = train.norm.df[, 11], k = 3)
valid.norm.df$CAT..MEDV <-as.factor(valid.norm.df$CAT..MEDV)
accuracy.df[3, 2] <- confusionMatrix(knn.pred, valid.norm.df[,
11])$overall[1]
#'
#' compute knn for different k on validation.
#'
## -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
for(i in 1:20) {
knn.pred <- knn(train.norm.df[, 1:10], valid.norm.df[, 1:10],
cl = train.norm.df[, 11], k = i)
accuracy.df[i, 2] <- confusionMatrix(knn.pred, valid.norm.df[, 11])$overall[1]
}
accuracy.df
#'
#' use preProcess() from the caret package to normalize predictor variables. Check out the normalized data.
#' method = "center" subtracts the mean of the predictor's data (again from the data in x) from the predictor values while method = "scale" divides by the standard deviation. https://www.rdocumentation.org/packages/caret/versions/6.0-90/topics/preProcess
#'
## -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#----------Q4: write your code to preProcess the predictor variables from the train data---------------------------------
norm.values <- preProcess(train.df[,1:10], method=c("center", "scale"))
train.norm.df[, 1:10] <- predict(norm.values, train.df[, 1:10])
valid.norm.df[, 1:10] <- predict(norm.values, valid.df[, 1:10])
norm.df[, 1:10] <- predict(norm.values, df[, 1:10])
new.norm.df <- predict(norm.values, new.df)
## -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
library(class)
pred_nn <- knn(train = train.norm.df[, 1:10], test = new.norm.df,
cl = train.norm.df[, 11], k = 2)
pred_nn
# initialize a data frame with two columns: k, and accuracy.
accuracy.df <- data.frame(k = seq(1, 10, 1), accuracy = rep(0, 10))
#----------Q5: annotate the following lines of code--------------------------------------------------
knn.pred <- knn(train.norm.df[, 1:10], valid.norm.df[, 1:10],
cl = train.norm.df[, 11], k = 3)
valid.norm.df$CAT..MEDV <-as.factor(valid.norm.df$CAT..MEDV)
accuracy.df[3, 2] <- confusionMatrix(knn.pred, valid.norm.df[,
11])$overall[1]
#'
#' compute knn for different k on validation.
#'
## -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
for(i in 1:20) {
knn.pred <- knn(train.norm.df[, 1:10], valid.norm.df[, 1:10],
cl = train.norm.df[, 11], k = i)
accuracy.df[i, 2] <- confusionMatrix(knn.pred, valid.norm.df[, 11])$overall[1]
}
accuracy.df
new.rec <- data.frame(
CRIM=0.53,
ZN=0,
INDUS=6.18,
NOX=0.5,
RM=8,
AGE=83,
DIS=3,
TAX=307,
PTRATIO=17,
LSTAT=5
)
new.norm.rec <- predict(norm.values, new.rec)
new.norm.rec
exercise_recommendations <- list(
"male_5" = "For males under 5: At least 180 minutes physical activaties per day, such as running, jumping, and climbing.",
"female_5" = "For females under 5: At least 180 minutes physical activaties per day, such as running, jumping, and climbing.",
"male_5_18" = "For males between 5 to 18: At least 60 minutes of moderate or vigorous intensity physical activity per day, such as ",
"female_5_18" = "For females between 5 to 18: At least 60 minutes of moderate or vigorous intensity physical activity per day, such as ",
"male_65" = "For males 65 plus: ",
"female_65" = "For females 65 plus: "
)
print(recommend_exercise(4, "male"))
recommend_exercise(4, "male")
recommend_exercise(4, "male")
recommend_exercise <- function(age, gender) {
exercise_recommendations <- list(
"male_5" = "For males under 5: At least 180 minutes physical activaties per day, such as running, jumping, and climbing.",
"female_5" = "For females under 5: At least 180 minutes physical activaties per day, such as running, jumping, and climbing.",
"male_5_18" = "For males between 5 to 18: At least 60 minutes of moderate or vigorous intensity physical activity per day, such as ",
"female_5_18" = "For females between 5 to 18: At least 60 minutes of moderate or vigorous intensity physical activity per day, such as ",
"male_65" = "For males 65 plus: ",
"female_65" = "For females 65 plus: "
)
age_group <- if (age < 5) {
paste(gender, "_5", sep = "")
} else if (age >= 5 && age <= 18) {
paste(gender, "_5_18", sep = "")
} else if (age >= 65) {
paste(gender, "_65", sep = "")
}
if (!age_group %in% names(execise_recommendations)){
return("Sorry, this is not available.")
}
return(exercise_recommendations[[age_group]])
}
recommend_exercise(4, "male")
print(recommend_exercise(4, "male"))
recommend_exercise <- function(age, gender) {
exercise_recommendations <- list(
"male_5" = "For males under 5: At least 180 minutes physical activities per day, such as running, jumping, and climbing.",
"female_5" = "For females under 5: At least 180 minutes physical activities per day, such as running, jumping, and climbing.",
"male_5_18" = "For males between 5 to 18: At least 60 minutes of moderate or vigorous intensity physical activity per day, such as walking, playing sports, or swimming.",
"female_5_18" = "For females between 5 to 18: At least 60 minutes of moderate or vigorous intensity physical activity per day, such as walking, playing sports, or swimming.",
"male_65" = "For males 65 plus: At least 150 minutes of moderate intensity exercise per week, along with strength and flexibility exercises.",
"female_65" = "For females 65 plus: At least 150 minutes of moderate intensity exercise per week, along with strength and flexibility exercises."
)
# Create age group key based on input
age_group <- if (age < 5) {
paste(gender, "_5", sep = "")
} else if (age >= 5 && age <= 18) {
paste(gender, "_5_18", sep = "")
} else if (age >= 65) {
paste(gender, "_65", sep = "")
}
# Check if the age group is in the recommendations
if (!age_group %in% names(exercise_recommendations)) {
return("Sorry, this is not available.")
}
# Return the recommendation for the given age group
return(exercise_recommendations[[age_group]])
}
# Test the function
print(recommend_exercise(4, "male"))
if (!age_group %in% names(exercise_recommendations)){
return("Sorry, this is not available.")
}
recommend_exercise <- function(age, gender) {
exercise_recommendations <- list(
"male_5" = "For males under 5: At least 180 minutes physical activaties per day, such as running, jumping, and climbing.",
"female_5" = "For females under 5: At least 180 minutes physical activaties per day, such as running, jumping, and climbing.",
"male_5_18" = "For males between 5 to 18: At least 60 minutes of moderate or vigorous intensity physical activity per day, such as ",
"female_5_18" = "For females between 5 to 18: At least 60 minutes of moderate or vigorous intensity physical activity per day, such as ",
"male_65" = "For males 65 plus: ",
"female_65" = "For females 65 plus: "
)
age_group <- if (age < 5) {
paste(gender, "_5", sep = "")
} else if (age >= 5 && age <= 18) {
paste(gender, "_5_18", sep = "")
} else if (age >= 65) {
paste(gender, "_65", sep = "")
}
if (!age_group %in% names(exercise_recommendations)){
return("Sorry, this is not available.")
}
return(exercise_recommendations[[age_group]])
}
print(recommend_exercise(4, "male"))
